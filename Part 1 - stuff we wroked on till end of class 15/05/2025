% Template for MXB201 Project Part I.
%% Initialisation


clear
load partI

syms D_xx D_xy D_xz D_xy D_yy D_yz D_xz D_yz D_zz
K = [D_xx D_xy D_xz ; D_xy D_yy D_yz; D_xz D_yz D_zz ];
gx = g(:, 1); gy = g(:, 2); gz = g(:, 3);
A = [gx.^2, gy.^2, gz.^2, 2.*gx.*gy, 2.*gx.*gz, 2.*gy.*gz];
D_tilda = [D_xx D_yy D_zz D_xy D_xz D_yz ]';

[X,Y,num_dirs] = size(S);
assert(isequal(size(g), [num_dirs 3]));

% These arrays will be be filled in during the main loop below

MD = nan(X, Y); % mean diffusion
FA = nan(X, Y); % fractional anistropy
PDD = nan(X, Y, 3); % principal diffusion direction

% Any other initialisation needed here
%% Compute the diffusion tensor for each pixel

for x = 1:X
    for y = 1:Y
        % If not within the mask, skip the pixel
        if ~mask(x, y), continue; end

% Handling bad data

% Solving least squares problem        
        B = real(log(S./(S0*-b)));
        b_vec = squeeze( B(x, y, :) );
        c = A\b_vec;

% Forming diffusion tensor:    
        D = [ c(1), c(4), c(5)
      c(4), c(2), c(6)
      c(5), c(6), c(3) ];

% Finding eigenvalues and eigenvectors
       [V, L] = eig(D);
       ev = diag(L);% eigen decomposition

% Calculating MD, FA and PDD
       MD(x,y) = mean(ev); % mean diffusivity

       FA(x,y) = sqrt( 1.5 * sum((ev - MD(x,y)).^2) / sum(ev.^2) ); % fractional anisotropy

       % principal diffusion direction
       [~, idx] = max(ev);
       PDD(x,y,:) = V(:,idx);
       
    end
end
%% Plot mean diffusivity, fractional anisotropy and principal diffusion direction
maps
