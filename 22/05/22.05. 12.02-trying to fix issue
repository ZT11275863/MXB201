clear
load partI

[X,Y,num_dirs] = size(S);
assert(isequal(size(g), [num_dirs 3]));

% These arrays will be be filled in during the main loop below
MD  = nan(X, Y);    % mean diffusion
FA  = nan(X, Y);    % fractional anisotropy
PDD = nan(X, Y, 3); % principal diffusion direction

% Construct matrix for the values of A, composed from 'g':
A = [g(:,1).^2, g(:,2).^2, g(:,3).^2, 2.*g(:,1).*g(:,2), 2.*g(:,1).*g(:,3), 2.*g(:,2).*g(:,3)];

% Main loop to compute diffusion tensor
for x = 1:X
    for y = 1:Y

        % If not within the mask, skip the pixel
        if ~mask(x,y), continue; end

        % Skip if invalid S0 or any zero/negative signal values
        if S0(x,y) == 0 || any(S(x,y,:) <= 0)
            continue;
        end

        % Compute raw B-vector
        B = real(log(S./S0)) * (1/-b);
        B_vec = squeeze(B(x,y,:));

        % Thresholding: ignore low-signal directions
        Flocal = squeeze(S(x,y,:));
        thresh = 0.1 * max(Flocal);
        idx = find(Flocal >= thresh);

        % Skip pixel if too few valid directions
        if numel(idx) < 6
            continue;
        end

        % Solve reduced least-squares problem
        A_sub = A(idx, :);
        B_sub = B_vec(idx);
        D_t = A_sub \ B_sub;

        % Form the diffusion tensor
        D = [ D_t(1), D_t(4), D_t(5);
              D_t(4), D_t(2), D_t(6);
              D_t(5), D_t(6), D_t(3) ];

        % Eigendecomposition
        [V, L] = eig(D);
        ev = diag(L) * 400;

        % Enforce positive eigenvalues (SPD)
        if any(ev <= 0)
            if ev(1) <= 0, ev(1) = 0.0004; end
            if ev(2) < ev(1), ev(2) = ev(1) + 0.0001; end
            if ev(3) < ev(2), ev(3) = ev(2) + 0.0001; end
        end

        % Compute MD, FA and PDD
        MD(x,y) = mean(ev);
        FA(x,y) = sqrt(1.5 * sum((ev - MD(x,y)).^2) / sum(ev.^2));
        [~, idx_max] = max(ev);
        PDD(x,y,:) = V(:, idx_max);

        % Clean up NaNs
        PDD(isnan(PDD)) = 0;
        FA(isnan(FA)) = 0;
    end
end

% Plot the results
figure

% Mean Diffusivity Map
subplot(3,1,1);
imshow(MD, []);
title('Mean Diffusivity Map');

% Fractional Anisotropy Map
subplot(3,1,2);
imshow(FA);
title('Fractional Anisotropy Map');

% Principal Direction of Diffusion RGB Map
subplot(3,1,3);
RGB = zeros(X, Y, 3);
for c = 1:3
    RGB(:,:,c) = PDD(:,:,c) .* FA;
end
imshow(RGB);
title('Principal Direction of Diffusion Map');
